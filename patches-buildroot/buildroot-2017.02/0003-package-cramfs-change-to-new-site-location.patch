From 2cf4871808a820e48e265a5c91e6d0c51886e635 Mon Sep 17 00:00:00 2001
From: Chris Brandt <chris.brandt@renesas.com>
Date: Sat, 7 Apr 2018 08:35:42 -0500
Subject: [PATCH 1/2] package/cramfs: change to new site location

As of Linux-4.15, cramfs now has a official maintainer again.
Additionally, that person is hosting and maintaining a new version of
cramfs-tools.

Patches 0001-endian.patch and 0003-fix-missing-types.patch are no longer
needed because they have been upstreamed.

However, since patch 0002-cygwin_IO.patch is so old, it is being
removed until someone that needs it can reapply and test it. At
that point, they should submit the changes to the new cramfs-tools
maintainer instead of adding the patches back here.

Please note that cross-endian support for cramfsck is not supported
at this time.

Cc: Nicolas Pitre <nico@linaro.org>
Signed-off-by: Chris Brandt <chris.brandt@renesas.com>
Reviewed-by: Matt Weber <matthew.weber@rockwellcollins.com>
Signed-off-by: Thomas Petazzoni <thomas.petazzoni@bootlin.com>
---
 fs/cramfs/Config.in                         |   2 +-
 fs/cramfs/cramfs.mk                         |   4 +-
 package/cramfs/0001-endian.patch            | 288 ----------------------------
 package/cramfs/0002-cygwin_IO.patch         |  15 --
 package/cramfs/0003-fix-missing-types.patch |  17 --
 package/cramfs/Config.in                    |   2 +-
 package/cramfs/Config.in.host               |   2 +-
 package/cramfs/cramfs.hash                  |   2 +-
 package/cramfs/cramfs.mk                    |   4 +-
 9 files changed, 8 insertions(+), 328 deletions(-)
 delete mode 100644 package/cramfs/0001-endian.patch
 delete mode 100644 package/cramfs/0002-cygwin_IO.patch
 delete mode 100644 package/cramfs/0003-fix-missing-types.patch

diff --git a/fs/cramfs/Config.in b/fs/cramfs/Config.in
index 1a4e326472..b11885b4f4 100644
--- a/fs/cramfs/Config.in
+++ b/fs/cramfs/Config.in
@@ -3,4 +3,4 @@ config BR2_TARGET_ROOTFS_CRAMFS
 	help
 	  Build a cramfs root filesystem
 
-	  http://sourceforge.net/projects/cramfs/
+	  https://github.com/npitre/cramfs-tools
diff --git a/fs/cramfs/cramfs.mk b/fs/cramfs/cramfs.mk
index f880871935..8745c78031 100644
--- a/fs/cramfs/cramfs.mk
+++ b/fs/cramfs/cramfs.mk
@@ -5,9 +5,9 @@
 ################################################################################
 
 ifeq ($(BR2_ENDIAN),"BIG")
-CRAMFS_OPTS = -b
+CRAMFS_OPTS = -B
 else
-CRAMFS_OPTS = -l
+CRAMFS_OPTS = -L
 endif
 
 define ROOTFS_CRAMFS_CMD
diff --git a/package/cramfs/0001-endian.patch b/package/cramfs/0001-endian.patch
deleted file mode 100644
index b2eda5a1db..0000000000
--- a/package/cramfs/0001-endian.patch
+++ /dev/null
@@ -1,288 +0,0 @@
-Index: cramfs-1.1/mkcramfs.c
-===================================================================
---- cramfs-1.1.orig/mkcramfs.c	2002-02-20 09:03:32.000000000 +0100
-+++ cramfs-1.1/mkcramfs.c	2011-09-09 15:11:00.980895119 +0200
-@@ -93,6 +93,7 @@
- static int opt_verbose = 0;
- static char *opt_image = NULL;
- static char *opt_name = NULL;
-+static int swap_endian = 0;
- 
- static int warn_dev, warn_gid, warn_namelen, warn_skip, warn_size, warn_uid;
- 
-@@ -130,6 +131,8 @@
- 		" -i file    insert a file image into the filesystem (requires >= 2.4.0)\n"
- 		" -n name    set name of cramfs filesystem\n"
- 		" -p         pad by %d bytes for boot code\n"
-+		" -l         litte endian filesystem\n"
-+		" -b         big endian filesystem\n"
- 		" -s         sort directory entries (old option, ignored)\n"
- 		" -v         be more verbose\n"
- 		" -z         make explicit holes (requires >= 2.3.39)\n"
-@@ -372,6 +375,50 @@
- 	return totalsize;
- }
- 
-+/* routines to swap endianness/bitfields in inode/superblock block data */
-+static void fix_inode(struct cramfs_inode *inode)
-+{
-+#define wswap(x)    (((x)>>24) | (((x)>>8)&0xff00) | (((x)&0xff00)<<8) | (((x)&0xff)<<24))
-+	/* attempt #2 */
-+	inode->mode = (inode->mode >> 8) | ((inode->mode&0xff)<<8);
-+	inode->uid = (inode->uid >> 8) | ((inode->uid&0xff)<<8);
-+	inode->size = (inode->size >> 16) | (inode->size&0xff00) |
-+		((inode->size&0xff)<<16);
-+	((u32*)inode)[2] = wswap(inode->offset | (inode->namelen<<26));
-+}
-+
-+static void fix_offset(struct cramfs_inode *inode, u32 offset)
-+{
-+	u32 tmp = wswap(((u32*)inode)[2]);
-+	((u32*)inode)[2] = wswap((offset >> 2) | (tmp&0xfc000000));
-+}
-+
-+static void fix_block_pointer(u32 *p)
-+{
-+	*p = wswap(*p);
-+}
-+
-+static void fix_super(struct cramfs_super *super)
-+{
-+	u32 *p = (u32*)super;
-+
-+	/* fix superblock fields */
-+	p[0] = wswap(p[0]);	/* magic */
-+	p[1] = wswap(p[1]);	/* size */
-+	p[2] = wswap(p[2]);	/* flags */
-+	p[3] = wswap(p[3]);	/* future */
-+
-+	/* fix filesystem info fields */
-+	p = (u32*)&super->fsid;
-+	p[0] = wswap(p[0]);	/* crc */
-+	p[1] = wswap(p[1]);	/* edition */
-+	p[2] = wswap(p[2]);	/* blocks */
-+	p[3] = wswap(p[3]);	/* files */
-+
-+	fix_inode(&super->root);
-+#undef wswap
-+}
-+
- /* Returns sizeof(struct cramfs_super), which includes the root inode. */
- static unsigned int write_superblock(struct entry *root, char *base, int size)
- {
-@@ -405,6 +452,7 @@
- 	super->root.gid = root->gid;
- 	super->root.size = root->size;
- 	super->root.offset = offset >> 2;
-+	if (swap_endian) fix_super(super);
- 
- 	return offset;
- }
-@@ -419,7 +467,10 @@
- 	if (offset >= (1 << (2 + CRAMFS_OFFSET_WIDTH))) {
- 		die(MKFS_ERROR, 0, "filesystem too big");
- 	}
--	inode->offset = (offset >> 2);
-+	if (swap_endian)
-+		fix_offset(inode, offset);
-+	else
-+		inode->offset = (offset >> 2);
- }
- 
- /*
-@@ -515,6 +566,7 @@
- 				stack_entries++;
- 			}
- 			entry = entry->next;
-+			if (swap_endian) fix_inode(inode);
- 		}
- 
- 		/*
-@@ -609,6 +661,7 @@
- 		}
- 
- 		*(u32 *) (base + offset) = curr;
-+		if (swap_endian) fix_block_pointer((u32*)(base + offset));
- 		offset += 4;
- 	} while (size);
- 
-@@ -699,7 +752,7 @@
- 		progname = argv[0];
- 
- 	/* command line options */
--	while ((c = getopt(argc, argv, "hEe:i:n:psvz")) != EOF) {
-+	while ((c = getopt(argc, argv, "hEe:i:n:psvzlb")) != EOF) {
- 		switch (c) {
- 		case 'h':
- 			usage(MKFS_OK);
-@@ -727,6 +780,18 @@
- 			opt_pad = PAD_SIZE;
- 			fslen_ub += PAD_SIZE;
- 			break;
-+		case 'b':
-+#if __BYTE_ORDER == __LITTLE_ENDIAN
-+			swap_endian = 1;
-+			printf("Swapping filesystem endian-ness\n");
-+#endif
-+			break;
-+		case 'l':
-+#if __BYTE_ORDER == __BIG_ENDIAN
-+			swap_endian = 1;
-+			printf("Swapping filesystem endian-ness\n");
-+#endif
-+			break;
- 		case 's':
- 			/* old option, ignored */
- 			break;
-Index: cramfs-1.1/cramfsck.c
-===================================================================
---- cramfs-1.1.orig/cramfsck.c	2002-02-23 01:00:42.000000000 +0100
-+++ cramfs-1.1/cramfsck.c	2011-09-09 15:10:06.810894275 +0200
-@@ -30,6 +30,7 @@
-  * 2000/07/15: Daniel Quinlan (initial support for block devices)
-  * 2002/01/10: Daniel Quinlan (additional checks, test more return codes,
-  *                            use read if mmap fails, standardize messages)
-+ * 2004/09/01: Alfonso Acosta (Add swapping support)
-  */
- 
- /* compile-time options */
-@@ -53,6 +54,7 @@
- #define _LINUX_STRING_H_
- #include <linux/fs.h>
- #include <linux/cramfs_fs.h>
-+#include <byteswap.h>
- #include <zlib.h>
- 
- /* Exit codes used by fsck-type programs */
-@@ -73,6 +75,7 @@
- static char *filename;		/* ROM image filename */
- struct cramfs_super super;	/* just find the cramfs superblock once */
- static int opt_verbose = 0;	/* 1 = verbose (-v), 2+ = very verbose (-vv) */
-+static int need_swapping = 0;   /* fs and host dont have the same endianness */
- #ifdef INCLUDE_FS_TESTS
- static int opt_extract = 0;		/* extract cramfs (-x) */
- static char *extract_dir = "root";	/* extraction directory (-x) */
-@@ -84,6 +87,9 @@
- static unsigned long start_data = ~0UL;	/* start of the data (256 MB = max) */
- static unsigned long end_data = 0;	/* end of the data */
- 
-+/* access 32 byte variables */
-+#define CRAMFS_32(x)  (need_swapping ? bswap_32(x) : x)
-+
- /* Guarantee access to at least 8kB at a time */
- #define ROMBUFFER_BITS	13
- #define ROMBUFFERSIZE	(1 << ROMBUFFER_BITS)
-@@ -165,20 +171,34 @@
- 	if (super.magic == CRAMFS_MAGIC) {
- 		*start = 0;
- 	}
-+	else if (super.magic == bswap_32(CRAMFS_MAGIC)) {
-+		*start = 0;
-+		need_swapping = 1;
-+	}
-+
- 	else if (*length >= (PAD_SIZE + sizeof(super))) {
- 		lseek(fd, PAD_SIZE, SEEK_SET);
- 		if (read(fd, &super, sizeof(super)) != sizeof(super)) {
- 			die(FSCK_ERROR, 1, "read failed: %s", filename);
- 		}
--		if (super.magic == CRAMFS_MAGIC) {
-+		if (super.magic == CRAMFS_32(CRAMFS_MAGIC)) {
- 			*start = PAD_SIZE;
- 		}
- 	}
- 
- 	/* superblock tests */
--	if (super.magic != CRAMFS_MAGIC) {
-+	if (super.magic != CRAMFS_32(CRAMFS_MAGIC)) {
- 		die(FSCK_UNCORRECTED, 0, "superblock magic not found");
- 	}
-+	if (need_swapping){
-+		super.size = bswap_32(super.size);
-+		super.flags = bswap_32(super.flags);
-+		super.future = bswap_32(super.future);
-+		super.fsid.crc = bswap_32(super.fsid.crc);
-+		super.fsid.edition = bswap_32(super.fsid.edition);
-+		super.fsid.blocks = bswap_32(super.fsid.blocks);
-+		super.fsid.files = bswap_32(super.fsid.files); 
-+	}	
- 	if (super.flags & ~CRAMFS_SUPPORTED_FLAGS) {
- 		die(FSCK_ERROR, 0, "unsupported filesystem features");
- 	}
-@@ -213,7 +233,10 @@
- 		die(FSCK_USAGE, 0, "unable to test CRC: old cramfs format");
- #endif /* not INCLUDE_FS_TESTS */
- 	}
--
-+	else if (need_swapping) {
-+       /* crc checking in this case would mean  translating the whole file */
-+		return;
-+	}
- 	crc = crc32(0L, Z_NULL, 0);
- 
- 	buf = mmap(NULL, super.size, PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0);
-@@ -298,12 +321,23 @@
- 
- static struct cramfs_inode *cramfs_iget(struct cramfs_inode * i)
- {
-+#define wswap(x)    (((x)>>24) | (((x)>>8)&0xff00) | (((x)&0xff00)<<8) | (((x)&0xff)<<24))
- 	struct cramfs_inode *inode = malloc(sizeof(struct cramfs_inode));
- 
- 	if (!inode) {
- 		die(FSCK_ERROR, 1, "malloc failed");
- 	}
--	*inode = *i;
-+	if(!need_swapping) {
-+		*inode = *i;
-+	}
-+	else { 
-+		inode->mode=bswap_16(i->mode);
-+		inode->uid=bswap_16(i->uid);
-+		inode->size=bswap_32(i->size << 8);
-+		inode->gid=i->gid;
-+		inode->namelen = bswap_32(((u32*)i)[2]) >> 26;
-+		inode->offset = bswap_32(((u32*)i)[2]) & 0x3FFFFFFF;
-+	}
- 	return inode;
- }
- 
-@@ -322,9 +356,9 @@
-  */
- static struct cramfs_inode *read_super(void)
- {
--	unsigned long offset = super.root.offset << 2;
--
--	if (!S_ISDIR(super.root.mode))
-+	struct cramfs_inode *root = cramfs_iget(&super.root);
-+	unsigned long offset = root->offset << 2; 
-+	if (!S_ISDIR(root->mode))
- 		die(FSCK_UNCORRECTED, 0, "root inode is not directory");
- 	if (!(super.flags & CRAMFS_FLAG_SHIFTED_ROOT_OFFSET) &&
- 	    ((offset != sizeof(struct cramfs_super)) &&
-@@ -332,7 +366,7 @@
- 	{
- 		die(FSCK_UNCORRECTED, 0, "bad root offset (%lu)", offset);
- 	}
--	return cramfs_iget(&super.root);
-+	return root;
- }
- 
- static int uncompress_block(void *src, int len)
-@@ -364,7 +398,7 @@
- 
- 	do {
- 		unsigned long out = PAGE_CACHE_SIZE;
--		unsigned long next = *(u32 *) romfs_read(offset);
-+		unsigned long next = CRAMFS_32(*(u32 *) romfs_read(offset));
- 
- 		if (next > end_data) {
- 			end_data = next;
-@@ -525,7 +559,7 @@
- {
- 	unsigned long offset = i->offset << 2;
- 	unsigned long curr = offset + 4;
--	unsigned long next = *(u32 *) romfs_read(offset);
-+	unsigned long next = CRAMFS_32(*(u32 *) romfs_read(offset));
- 	unsigned long size;
- 
- 	if (offset == 0) {
diff --git a/package/cramfs/0002-cygwin_IO.patch b/package/cramfs/0002-cygwin_IO.patch
deleted file mode 100644
index 8be333f01b..0000000000
--- a/package/cramfs/0002-cygwin_IO.patch
+++ /dev/null
@@ -1,15 +0,0 @@
-Index: cramfs-1.1/cramfsck.c
-===================================================================
---- cramfs-1.1.orig/cramfsck.c	2011-09-09 15:10:06.000000000 +0200
-+++ cramfs-1.1/cramfsck.c	2011-09-09 15:13:49.950897747 +0200
-@@ -57,6 +57,10 @@
- #include <byteswap.h>
- #include <zlib.h>
- 
-+#ifdef __CYGWIN__
-+#define _IO(type,nr)   _IOC(_IOC_NONE,(type),(nr),0)
-+#endif /* __CYGWIN__ */
-+
- /* Exit codes used by fsck-type programs */
- #define FSCK_OK          0	/* No errors */
- #define FSCK_NONDESTRUCT 1	/* File system errors corrected */
diff --git a/package/cramfs/0003-fix-missing-types.patch b/package/cramfs/0003-fix-missing-types.patch
deleted file mode 100644
index 896110011e..0000000000
--- a/package/cramfs/0003-fix-missing-types.patch
+++ /dev/null
@@ -1,17 +0,0 @@
-mkcramfs; loff_t is guarded by _GNU_SOURCE
-
-Although already properly done in cramfsck, it was missing in mkcramfs.
-
-Signed-off-by: "Yann E. MORIN" <yann.morin.1998@free.fr>
-
-diff -durN cramfs-1.1.orig/mkcramfs.c cramfs-1.1/mkcramfs.c
---- cramfs-1.1.orig/mkcramfs.c	2015-08-05 22:31:16.830543096 +0200
-+++ cramfs-1.1/mkcramfs.c	2015-08-05 22:33:33.136289744 +0200
-@@ -22,6 +22,7 @@
-  * If you change the disk format of cramfs, please update fs/cramfs/README.
-  */
- 
-+#define _GNU_SOURCE
- #include <sys/types.h>
- #include <stdio.h>
- #include <sys/stat.h>
diff --git a/package/cramfs/Config.in b/package/cramfs/Config.in
index b2a0c6c516..a177004ca9 100644
--- a/package/cramfs/Config.in
+++ b/package/cramfs/Config.in
@@ -5,4 +5,4 @@ config BR2_PACKAGE_CRAMFS
 	  cramfs is a compressed read-only filesystem. This package
 	  contains the tools to generate and check a cramfs filesystem.
 
-	  http://sourceforge.net/projects/cramfs/
+	  https://github.com/npitre/cramfs-tools
diff --git a/package/cramfs/Config.in.host b/package/cramfs/Config.in.host
index 53b43d4420..e594d5c820 100644
--- a/package/cramfs/Config.in.host
+++ b/package/cramfs/Config.in.host
@@ -4,4 +4,4 @@ config BR2_PACKAGE_HOST_CRAMFS
 	  cramfs is a compressed read-only filesystem. This package
 	  contains the tools to generate and check a cramfs filesystem.
 
-	  http://sourceforge.net/projects/cramfs/
+	  https://github.com/npitre/cramfs-tools
diff --git a/package/cramfs/cramfs.hash b/package/cramfs/cramfs.hash
index b8c5f5fbcb..c6c18b073c 100644
--- a/package/cramfs/cramfs.hash
+++ b/package/cramfs/cramfs.hash
@@ -1,2 +1,2 @@
 # Locally computed:
-sha256  133caca2c4e7c64106555154ee0ff693f5cf5beb9421ce2eb86baee997d22368  cramfs-1.1.tar.gz
+sha256  99d87aa5874f4a34c219275e0297b0f4c710895f9c87295267aeabe6a752add1  cramfs-1a1e65f2a049.tar.gz
diff --git a/package/cramfs/cramfs.mk b/package/cramfs/cramfs.mk
index 70010e8e2f..18bef80bd2 100644
--- a/package/cramfs/cramfs.mk
+++ b/package/cramfs/cramfs.mk
@@ -4,8 +4,8 @@
 #
 ################################################################################
 
-CRAMFS_VERSION = 1.1
-CRAMFS_SITE = http://downloads.sourceforge.net/project/cramfs/cramfs/$(CRAMFS_VERSION)
+CRAMFS_VERSION = 1a1e65f2a049
+CRAMFS_SITE = $(call github,npitre,cramfs-tools,$(CRAMFS_VERSION))
 CRAMFS_LICENSE = GPLv2+
 CRAMFS_LICENSE_FILES = COPYING
 
-- 
2.16.1

