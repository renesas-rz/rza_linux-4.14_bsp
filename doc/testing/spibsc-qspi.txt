        Board HW: 
             Bus: SPIBSC channel 1
     Device Addr: 
Required package: mtd-utils 1.5.1
    In Buildroot: Yes

Buildroot menuconfig changes:
	Target packages ->
		Filesystem and flash utilities ->
			[*] mtd, jffs2 and ubi/ubifs tools


$ cat /proc/mtd
dev:    size   erasesize  name
mtd0: 03800000 04000000 "rootfs"
mtd1: 00080000 00020000 "u-boot"
mtd2: 00040000 00020000 "u-boot_env"
mtd3: 00040000 00020000 "dtb"
mtd4: 00400000 00020000 "kernel"
mtd5: 03b00000 00020000 "data"
mtd6: 00080000 00040000 "spibsc0_loader"
mtd7: 00040000 00040000 "spibsc0_bootenv"
mtd8: 00400000 00040000 "spibsc0_kernel"
mtd9: 03b40000 00040000 "spibsc0_rootfs"

======== show SPI Flash contents (u-boot env settings) ========

$ hexdump /dev/mtdblock7 -n64 -C
00000000  ee 8a 04 a3 62 61 75 64  72 61 74 65 3d 31 31 35  |....baudrate=115|
00000010  32 30 30 00 62 6f 6f 74  61 72 67 73 3d 63 6f 6e  |200.bootargs=con|
00000020  73 6f 6c 65 3d 74 74 79  53 43 32 2c 31 31 35 32  |sole=ttySC2,1152|
00000030  30 30 20 72 6f 6f 74 3d  2f 64 65 76 2f 6e 66 73  |00 root=/dev/nfs|
00000040  20 69 67 6e 6f 72 65 5f  6c 6f 67 6c 65 76 65 6c  | ignore_loglevel|
00000050  20 72 77 20 69 70 3d 64  68 63 70 20 6e 66 73 72  | rw ip=dhcp nfsr|
00000060  6f 6f 74 3d 31 39 32 2e  31 36 38 2e 30 2e 31 3a  |oot=192.168.0.1:|
00000070  2f 68 6f 6d 65 2f 72 65  6e 65 73 61 73 2f 72 7a  |/home/renesas/rz|
00000080  61 31 2f 72 6f 6f 74 66  73 00 62 6f 6f 74 64 65  |a1/rootfs.bootde|
00000090  6c 61 79 3d 33 00 65 74  68 61 63 74 3d 73 68 5f  |lay=3.ethact=sh_|
000000a0  65 74 68 00 65 74 68 61  64 64 72 3d 37 34 3a 39  |eth.ethaddr=74:9|
000000b0  30 3a 35 30 3a 30 30 3a  34 65 3a 33 36 00 66 64  |0:50:00:4e:36.fd|
000000c0  74 61 64 64 72 3d 39 38  30 30 30 30 30 00 66 69  |taddr=9800000.fi|
000000d0  6c 65 61 64 64 72 3d 39  38 30 30 30 30 30 00 66  |leaddr=9800000.f|
000000e0  69 6c 65 73 69 7a 65 3d  33 37 61 00 69 70 61 64  |ilesize=37a.ipad|
000000f0  64 72 3d 31 39 32 2e 31  36 38 2e 30 2e 35 35 00  |dr=192.168.0.55.|
00000100


======== read time check ========

$ hdparm -T -t /dev/mtdblock9

/dev/mtdblock9:
Timing buffer-cache reads: hdparm: HDIO_DRIVE_CMD: Inappropriate ioctl for device
   28 MB in 0.51 seconds = 55606 kB/s
Timing buffered disk reads:    5 MB in 3.57 seconds = 1430 kB/s
hdparm: HDIO_DRIVE_CMD: Inappropriate ioctl for device


======== flash_eraseall check ========
-------------- mtd4 ------------------
# time flash_eraseall /dev/mtd4
Erasing 256 Kibyte @ 80000 - 100% complete.
real    0m 0.46s
user    0m 0.01s
sys     0m 0.16s


# Copy contents to tmp
  # Erase all
   # Copy contents back
     # reboot to u-boot (let u-boot check CRC on boot)

$ dd if=/dev/mtdblock7 of=/tmp/bootenv bs=1K
$ dd if=/dev/mtdblock7 of=/root/bootenv bs=1K
256+0 records in
256+0 records out

$ Modify jsut a portion of parttion (read/combine/erase/write)
echo 1234 > /dev/mtdblock7
$ hexdump /dev/mtdblock7 -n64 -C
00000000  31 32 33 34 0a 61 75 64  72 61 74 65 3d 31 31 35  |1234.audrate=115|
00000010  32 30 30 00 62 6f 6f 74  61 72 67 73 3d 63 6f 6e  |200.bootargs=con|
00000020  73 6f 6c 65 3d 74 74 79  53 43 32 2c 31 31 35 32  |sole=ttySC2,1152|
00000030  30 30 20 72 6f 6f 74 3d  2f 64 65 76 2f 6e 66 73  |00 root=/dev/nfs|
00000040

---------------------------------
JFFS2 R/W file system example
---------------------------------
Step 1: Add JFFS image to Buildroot

	# menuconfig
	(rskrza1_bsp)$ ./build.sh buildroot menuconfig

	Filesystem images ->
		[*] jffs2 root filesystem
		     Flash Type (Select custom page and erase size)  --->
		(0x100) Page Size
		(0x40000) Erase block size


	# Rebuild rootfs
	(rskrtza1_bsp)$ ./build.sh buildroot


Step 2: Add JFFS2 support to kernel

	# Kernel menuconfig
	(rskrtza1_bsp)$ ./build.sh kernel menuconfig

	CONFIG_JFFS2_FS=y

	File systems >
		Miscellaneous filesystems >
	  		<*> Journalling Flash File System v2 (JFFS2) support

Step 3: Program JFFS image into single QSPI

	# Pre-fill 10MB of SDRAM area (where you will download to) with 0xFF
	# Otherwise, JFFS2 will think it is corrupted blocks
	=> mw.b 08000000 0xFF A00000

	# Download JFFS2 to SDRAM
	(rskrza1_bsp)$ ./build.sh jlink output/buildroot-2014.05/output/images/rootfs.jffs2

	# Program 10MB JFFS image (rootfs.jffs2 + 0xFFs) into single QSPI (from SDRAM)
	=> sf probe 0 ; sf erase 00800000 A00000 ; sf write 08000000 00800000 A00000

	# Erase all flash after jffs2 image from address 18M (0x01200000 to 64M(0x04000000)
	=> sf probe 0 ; sf erase 01200000 02E00000

Step 4: Kernel Boot
	# Download uImage (0x09000000) and DTBS (0x09800000) to SDRAM
	(rskrza1_bsp)$ ./build.sh jlink output/linux-3.14/arch/arm/boot/uImage 0x09000000
	(rskrza1_bsp)$ ./build.sh jlink output/linux-3.14/arch/arm/boot/dts/r7s72100-rskrza1.dtb 0x09800000

	# Kernel Boot:
	=> setenv j1 'bootm start 0x09000000 - 0x09800000 ; bootm loados'
	=> setenv jbootargs 'console=ttySC2,115200 ignoreloglevel console=tty0 root=/dev/mtdblock9 rw rootfstype=jffs2'
	=> setenv jboot 'run j1; setenv bootargs ${jbootargs}; fdt chosen; bootm go'
	=> save
	=> run jboot

	NOTE: After mounting the rootfs, the JFFS2 driver will scan every erase sector
	looking for headers, so you'll see the system just sit there for a couple seconds
	before it finally gives you a login prompt.

Step 5: Programming kernel into single QSPI
	# Instead of downloading the kernel to RAM usign JLINK, you can use these
	  steps to program the kernel and DTBS into single QSPI Flash.

	(rskrza1_bsp)$ ./build.sh jlink output/linux-3.14/arch/arm/boot/dts/r7s72100-rskrza1.dtb 0x09800000
	(uboot) => sf probe 0 ; sf erase C0000 40000 ; sf write 0x09800000 C0000 40000

	(rskrza1_bsp)$ ./build.sh jlink output/linux-3.14/arch/arm/boot/uImage 0x09000000
	(uboot) => sf probe 0 ; sf erase 100000 500000 ; sf write 0x09000000 100000 500000

	# Now, to boot the kernel:
	=> setenv j1 'sf probe 0 ; sf read 0x09800000 C0000 40000 ; sf read 0x09000000 100000 500000'
	=> setenv j2 'bootm start 0x09000000 - 0x09800000 ; bootm loados'
	=> setenv jbootargs 'console=ttySC2,115200 ignoreloglevel console=tty0 root=/dev/mtdblock9 rw rootfstype=jffs2'
	=> setenv jboot 'run j1 j2; setenv bootargs ${jbootargs}; fdt chosen; bootm go'
	=> save
	=> run jboot


NOTES:
	- If you mount your JFFS2 file system as R/W, after every command, busybox will update the file /root/.ash_history which
	will result in 2 page write commands being sent to the SPI flash. To avoid this, simple execute this command which
	will make .ash_history a pointer to a RAM based file intead (as in, no more SPI flash writes after each command)
		$ rm .ash_history ; ln -s /tmp/ash_history .ash_history



